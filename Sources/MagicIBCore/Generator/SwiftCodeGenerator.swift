//
//  SwiftCodeGenerator.swift
//  
//
//  Created by Ryu on 2022/08/21.
//

import Foundation

class SwiftCodeGenerator {
    
    enum IBType {
        case storyboard(ibViewController: IBViewController)
        case xib(ibView: IBView)
    }
    
    let type: IBType
    let url: URL
    
    private var indentCount = 0
    
    init(url: URL, type: IBType) {
        self.type = type
        self.url = url
    }
    
    func generate() throws -> String {
        switch type {
        case .storyboard(let ibViewController):
            return try generateViewController(ibViewController: ibViewController)
        case .xib(let ibView):
            return generateView(ibView: ibView)
        }
    }
    
    private func generateViewController(ibViewController: IBViewController) throws -> String {
        guard let ibView = ibViewController.ibView else { throw "IBViewController property IBView is nil" }
        
        return buildLines {
            let dependencies: [Dependencies] = [ibViewController.dependencies] + ibViewController.ibView.subviews.compactMap { $0.dependencies }
            generateFileHeader()
            Line.newLine
            generateImport(dependencies: dependencies)
            Line.newLine
            ibView.subviews.flatMap { $0.generateSwiftCode() + [Line.newLine] }
        }
        .map {
            var mutatingLine = $0
            if mutatingLine.isStartOfBlock {
                mutatingLine.indent(indentCount)
                indentCount += 1
            }
            else if mutatingLine.isEndOfBlock {
                indentCount -= 1
                mutatingLine.indent(indentCount)
            }
            else {
                mutatingLine.indent(indentCount)
            }
            return mutatingLine.line
        }
        .joined(separator: "\n")
        
    }
    
    private func buildLines(@ArrayBuilder<Line> _ builder: () -> [Line]) -> [Line] {
        builder()
    }
    
    private func generateView(ibView: IBView) -> String {
        ""
    }
    
    private func generateImport(dependencies: [Dependencies]) -> [Line] {
        Set<String>(dependencies.flatMap { $0.dependencies })
            .map { Line(relatedVariableName: .import, custom: "import \($0)") }
    }
    
    private func generateFileHeader() -> [Line] {
        """
        // \(url.lastPathComponent)
        //
        // This is a generated file.
        // Generated by MagicIB, see https://github.com/Ryu0118/MagicIB
        //
        """.buildLines(relatedVariableName: .fileHeader)
    }
    
}
